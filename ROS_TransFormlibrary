tf: the Transform Library 요약.

0. Abstract
tf는 전체 시스템에서 조직화된 frame들을 유지하는 것과 그 때의 데이터 변형에 관련하여,
 standard한 방법을 제공하기 위해 디자인되었다. ROS 초기에 조직화된 프레임들은
 개발자들을 굉장히 힘들게 했다.
왜냐 - > 이를 처리함에 있어서 생기는 태스크들이 굉장히 복잡하여 
데이터 변형이 조금만 잘못되어도 버그들이 굉장히 많았음.

조직화된 프레임들 사이끼리도 데이터 변환 시에 처리할 요소들이 많았다?

이 논문이 설명할 것:
-조직화 된 프레임들로 인하여 처리해야 할 문제점들의 어려움, 문제를 해결하는데 필요한 것.
-tf라이브러리 와 문제들을 해결하는데 필요한 것 사이의 연관성.(use-case제공.)
-tf의 강력한 익스텐션: core 역량과 메모리 공간을 고려한.


1. Introduction
gripper가 달린 로봇이 빨간 공을 집는 태스크를 수행하는 과정을 생각해보자.
보기엔 간단해 보이지만, 이를 해결하기 위해선 공과 gripper간의 relation을 알아야하며, 
만약 방에 공을 detect하는 센서가 있다면, 센싱한 데이터를 사용하기 위해 로봇의 base부터 토르소, 
팔, 그리퍼로 가는 연산을 해야한다. 그 뒤 공과 그 연산결과를 비교하여 로봇이 어떻게 움직여야 할지도
계산해야한다. 여기까지도 힘들다.
그리고 계산결과가 만약 그리퍼를 왼쪽 3센치를 움직이는 등의 여러가지를 시사할 것인데, 이것이 로봇을
이루는 각 부분 별로 계산된다면, 이것은 로봇이 공을 줍는 태스크가 아닌 로봇이 넘어지는 태스크를
초래할 것이다. 즉, 각 로봇의 부분별로 compatible한 연산이 이루어져야 한다.

게다가 이러한 연산을 모델링 하기 위해서는 로봇 시스템 뿐만 아니라 센서 모터 등의 여러가지 복잡한 
부분들에 대하여 정확히 알고 있어야한다.

그러므로 로봇이 움직이는 것을 모델링 하는 것은 굉장히 어렵다.

그러나 만약, 프로그래머가 라이브러리에서 요청해오듯이 그리퍼를 어떻게 움직여야할지에 대한 
값을 받아올 수 있다면 어떨까? 그렇다면 프로그래머는 굳이 이 복잡한 계산에 대하여 알 필요가 없다.

프로그래머는 단지 coordinate frames와 동작시키고 싶은 태스크가 어느 부분과 가장 관련이 높은지를
알아보면 된다. 

이를 위하여 tf가 설계됨. keep track of coordinate frames와 transform data within entire system을
해결하기 위한 표준을 제공할 수 있음. 로보틱 시스템이 더 복잡해질 수록 더 정확히 태스크 프레임이 어디고 그 부분만 집중할 수 있게 해줌.

그래서 ROS에서 tf라이브러리를 만든거라고
tf는 broadcaster와 Listener로 나뉘며, 이 두 모듈들은 서로 합쳐지고 ROS ecosystem외에도 그 밖에서도 유용하다.

2. Related work.
tf는 scene graph와 개념이 연관되어있다. 
scene graph는 3차원공간 렌더링에 사용하는 visualizer에 많이 쓰는 것인데, 대개의 경우 랜더링 할
객체 트리로 이루어져있다. 
scene graph 예시 -> OSGAR(Open Scene Graph project to help with Augmented Reality)

3. Requirements
 tf는 위에서 말했듯 두 개의 파트로 나뉜다.
i. part that disseminating transform information to the entire system.
ii. part that receives the transform information and stores it for later use. ->able to respond to queries

시스템 안의 조직화 된 프레임들의 information 안에는 서로 다른 여러가지 요소들이 있다.
각 요소들은 가끔 hw와 연결되기도 하며, 각각 다른 빈도로 데이터를 생산한다.(센서값등)
그리고 tf 라이브러리는 이러한 비동기식 인풋들을 반드시 받아줄 수 있어야하고 정보가 지연되거나 잃더라도 망가져선 안된다.

tf는 ROS환경의 코어 라이브러리로써 설계되었으며, 이를 위해 잘게쪼개진 컴퓨터 리소스와 약한 네트워크,
심한 레이턴시에도 이겨낼 수 있도록 설계하였다. 또, 익명의 퍼블리시와 서브스크라이브 메시지 패싱에도
쓸 수 있도록 설계 되었다.
데이터변환을 제공하며, 데이터가 가용하지 않더라도 tf는 반드시 적절한 데이터를 

4. Design
a. Data structure
	transforms(간선)와 coordinate frames(정점)는 그래프로 표현할 수 있다.
	이 net은 비순환 그래프여야 함. (tree 구조.)
	트리 구조는 정점 탐색을 빠르게 할 수 있어야 한다.
	scene graph와 tf의 차이는 주기적으로 반복. /퀴리로 특정 값만 비동기식으로.
	동적변화를 허용 추가 정보없이.  직접 연결된 정점을 제외하고.
	각 정점의 업데이트들은 정점에따라 시간이 다르게 걸림.
	
	즉, tf에 의해 변환되는 모든 데이터들은 반드시 자신을 표현하는 coordinate frame과, 자기자신이
	유효한 시간 정보를 가지고 있어야만함. (Stamp라는 구조로 저장.)
b. transform broadcasting
	브로드캐스터 모듈은 최소빈도의 특정 transform이 일어난다는 걸
	알게 될 때마다 메시지를 브로드 캐스트한다.
c. transform listening
	브로드캐스터가 동작의 업데이트에 관한 주기적인 메시지를 보내면 (변하든 말든)
	리스너는 값들을 정렬된 리스트로 만들고, 쿼리될때마다 사이를 땡겨서 메꾼다.
	리스너는 미래에 coordinate frame의 존재를 가정할 수 없음(브로트 캐스터가 정기적으로 변환을 보내므로)
	메시지빈도가 높아질수록 정확도는 높아지겠지
	interpolation(땡기는거)은 중요하다. -> 퍼블리셔가 비동기적일 수 있도록해줌.
	(업데이트만 충분히 자주 보내준다는 전제하에)  SLERP가 관절 같은 것의 움직임을 예측.

d. transform computation
	Tc a = Tb a ∗Tc b 
e. strengths
	The simplicity of the core data structures carries through to the the overall system.

	i.efficiency
	The design of the tf library enables developers to only broadcast data once, which applies to both the sensor data as well as the transform data
	The minimal number of operations when monitoring is important because when operating a Listener will be continuously receiving updates and using limited computational resources.
	Keeping the list sorted is important because transform data may be delayed in the transmission. 
	 This is most efﬁcient if the data does arrive in order as the list insert will simplify to appending the new transform data, but is robust to out of order data. 
	To search an arbitrary graph the optimal search time will be O(|E|+|N|log|N|) with E being the number of edges and N being the number of coordinate frames 
	 limiting the graph to a tree makes searching for elements O(D) where D is the maximum depth of the tree.

	Thetf libraryenablessensordata,oranydatawithaStamp, to be transmitted in its original frame across the network as well as to be stored in its original frame

	ii) Flexibility: 
	By enabling the user to efﬁciently store and transporting the data in its raw format tf allows users great ﬂexibility. They are able to change the coordinate frame
	 in which they operate dynamically and also to do things like reprocess logged data in a different coordinate frame than the ones used when collecting the data .


5. Example Usecases
여러개의 리스너들을 가질 수 있는 능력은 객체화 될 시 라이브러리던 스크립트건 유용함. 
->합칠 때 충돌의 위험을 고려하지 않아도 됨.
가장 흔한 유스케이스:
PR2 navigation library: 라이브러리들이 자신들 안의 리스너 모듈들을 합침으로써 각자의
	코어 워크들을 수행할 수 있게 하기위함.
	-> 특히 얘는 센서데이터와 다른 것들끼리 
task specific frames: 인지 알고리즘이 어떤 물체를 인지하는데 필요한 frame.

자동차가 운행하던중 앞에 장애물을 인지함. 그런데 사실 자동차의 위치는 변하지 않았지만,
gps가 재시작등의 이유로 자동차의 위치와 장애물의 위치가 겹치는 것으로 인지되었다고 가정하자.
이 문제의 경우는 로봇 내의 피스톤들간의 relation을 표현하는 task frame을 이용하여, 원래의 위치로


7. Future Work
optimizing. in limited bandwidth links.
how to extend tf to support partially partitioned or bridged networks and consequently trees.
